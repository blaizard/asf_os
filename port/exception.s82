/**
 * \file
 *
 * \brief Exception and interrupt vectors to use with FreeRTOS.
 *
 * \note This file maps all events supported by an AVR UC3.
 *
 * \note For any project, there should be one and only one exception.s82 file.
 *       When FreeRTOS is used, this exception.s82 file is the one to keep (and
 *       possibly modify) over other exception.s82 files.
 *
 * Copyright (C) 2009 - 2011 Atmel Corporation. All rights reserved.
 *
 * \page License
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. The name of Atmel may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * 4. This software may only be redistributed and used in connection with an
 * Atmel AVR product.
 *
 * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

#if __CORE__ != __AVR32A__ && __CORE__ != __AVR32B__
  #error Implementation for the AVR32 architecture only.
#endif


#include <avr32/io.h>


//! @{
//! \verbatim


// Start of Exception Vector Table.

	/*
	 * EVBA must be aligned with a power of two strictly greater than the
	 * EVBA-relative offset of the last vector.
	 */
	COMMON  EVTAB:CODE:ROOT(9)


	// Force EVBA initialization.
	EXTERN  ??init_EVBA
	REQUIRE ??init_EVBA

	// Export symbol.
	PUBLIC  ??EVBA
	PUBLIC  _evba
??EVBA:
_evba:

	ORG 0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $

	ORG 0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $

	ORG 0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $

	ORG 0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $

	ORG 0x010
	// NMI.
_handle_NMI:
	rjmp $

	ORG 0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $

	ORG 0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $

	ORG 0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $

	ORG 0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $

	ORG 0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $

	ORG 0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $

	ORG 0x02C
	// Floating-Point: UNUSED IN AVR UC3.
_handle_Floating_Point:
	rjmp $

	ORG 0x030
	// Coprocessor Absent: UNUSED IN AVR UC3.
_handle_Coprocessor_Absent:
	rjmp $

	ORG 0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $

	ORG 0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $

	ORG 0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $

	ORG 0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $

	ORG 0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $

	ORG 0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $

	ORG 0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $

	ORG 0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $

	ORG 0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	lddpc   pc, __os_task_switch_context

	// Constant data area.
	ALIGN 2

	// Import symbol.
	EXTERN  _os_task_switch_context
__os_task_switch_context:
	DC32  _os_task_switch_context

	END


//! \endverbatim
//! @}
